12/27(토)
클래스는 관례상 대문자로 시작하고 낙타 표기법을 사용

Student student = new Student(); -> 객체 or 인스턴스
-> 실제 메모리에 만들어짐
-> 실제 메모리에 만들어진 실체를 객체 또는 인스턴스라고 한다.

클래스 - 객체를 생성하기 위한 툴 또는 설계도이다.
객체(Object) - 객체는 클래스에서 정의한 속성과 기능을 가진 실체이다. 객체는 서로 독립적인 상태를 가진다.
인스턴스(Instance) - 인스턴스는 특성 클래스로부터 생성된 객체를 의미한다.

12/28(일)
대원칙: 자바는 항상 변수의 값을 복수해서 대입한다.

기본형
- 사용하는 값을 변수에 직접 넣을 수 있는 기본형
- int, long, double, boolean처럼 변수에 사용
- 메서드로 기본형 데이터를 전달하면, 해당 값이 복사되어 전달된다. 이 경우 메서드 내부에서 매개변수는 변경되지않는다.

참조형
- 객체가 저장된 메모리의 위치를 가르키는 참조값
- Student student, int[] students
- 실제 객체의 위츠를 저장한다.
- 클래스는 참조형이다.
- String 사실은 클래스다.
- 메서드로 참조형 데이터를 전달하면, 참조값이 복사되어 전달된다. 이 경우, 메서드 내부에서 매개변수로 전달된 객체의 멤버 변수를 변경하면, 호출자의 객체도 변경된다.

12-31(화)
변수의 종류
멤버 변수: 클래스에 선언
지역 변수: 메서드에 선언 매개변수도 지역 변수의 한 종류이다.
- 지역 변수는 이름 그대로 특정 지역에서만 사용되는 변수라는 뜻이다.

변수의 값 초기화
멤버 변수: 자동 초기화
- 인스터스의 멤버 변수는 인스턴스를 생성할 때 자동으로 초기화된다.
지역 변수: 수동 초기화
- 지역 변수는 항상 직접 초기화해야 한다.

null
가비지 컬렉션 더 이상 사용하지 않는 인스턴스라 판단하고 해당 인스턴스를 자동으로 메모리에서 제거해준다.
객체는 해당 객체를 참조하는 곳이 있으면, jvm이 종료할 때 까지 계속 생존한다.

NullPointerException
Pointer(가리키다)

01-02(목)
절차 지향 프로그래밍
- 이름 그대로 절차를 지향한다. 실행 순서를 중요하게 생각하는 방식이다.

객체 지향 프로그래밍
- 객체를 지향한다. 객체를 중요하게 생각하는 방식이다.
- 실제 세계의 사물이나 사건을 객체로 보고, 이러한 객체들 간의 상호작용을 중심으로 프로그래밍하는 방식
즉 "무엇을" 중심으로 프로그래밍 한다.

절차 지향 프로그래밍 - 메서드 추출
- 중복 제거: 로직 중복이 제거되었다. 같은 로직이 필요하면 해당 메서드를 여러번 호출하면 된다.
- 변경 영향 범위: 기능을 수정할 때 해당 메서드 내부만 변경하면 된다.

절차 지행 프로그래밍의 한계

메서드는 객체를 생성해야 호출할 수 있다. 그런데 static이 붙으면 객체를 생성하지 않고도 메서드를 호출할 수 있다.

public class ValueData { // 클래스
    int value; // 멤버변수

    void add(){ // 메서드
        value++;
        System.out.println("숫자 증가: " + value);
    }
}

객체 지향 프로그래밍
- 하나의 클래스에 담아보기
- 어떤 속성을 가지고 어떤 기능을 제공하는지 이 부분에 초점을 맞추어야한다.

캡슐화
- 속성과 기능을 하나로 묶어서 필요한 기능을 메서드를 통해 외부에 제공하는 것을 캡슐화라고 한다.

01-05(일)
생성자 - 필요한 이유
객체를 생성하는 시점에 어떤 작업을 하고 싶다면 생성자(Copnstruct)를 이용하면 된다.
생성자를 알아보기 전에 먼저 생성자가 왜 필요한지?

this
- 멤버변수의 이름을 넣고 싶을 때 this.를 붙여서 사용
- 멤버 변수와 메서드에 선언 지역변수 이름이 중복될 경우에는 this.을 사용, 꼭 필요한 경우에만 사용해도 충분하다.

생성자 - 도입
- 생성자를 사용하면 객체를 생성하는 시점에 즉시 필요한 기능을 수행할 수 있다.

생성자 호출
- 생성자는 인스턴스를 생성하고 나서 즉시 호출된다. 생성자를 호출하는 방법은 다음 코드와 같이 new 명령어 다음에 생성자 이름과
매개변수에 맞추어 인수를 전달하면 된다.

기본 생성자
- 매개변수가 없는 생성자를 기본 생성자라 한다.
- 클래스에 생성자가 하나도 없으면 자바 컴파일러는 매개변수가 없고, 작동하는 코드가 없는 기본 생성자를 자동으로 만들어준다.
- 생성자가 하나라도 있으면 자바는 기본 생성자를 만들지 않는다.
- A a = new A() - 기본 생성자

생성자 - 오버로딩과 this()
- this() 규칙(this()는 생성자 코드의 첫줄에만 작성할 수 있다), 안 그러면 컴파일러 에러가 난다.

01-06(월)
접근 제어자
- 자바는 public, private 같은 접근 제어자를 제공한다. 접근 제어자를 사용하면 해당 클래스 외부에서 특정 필드나 메서드에 접근하는 것을
허용하거나 제한할 수 있다.
- private 접근 제어자는 모든 외부자 호출 막는다.

접근 제어자의 종류
- private: 모든 외부 호출을 막는다.
(나의 클래스 안으로 속성과 기능을 숨길 때 사용, 외부 클래스에서 해당 기능을 호출할 수 없다.)
- default: 같은 패키지 안에서 호출은 허용한다.
(나의 패키지 안으로 속성과 기능을 숨길 때 사용, 외부 패키지에서 해당 기능을 호출할 수없다.
- protected: 같은 패키지 안에서 호출은 허용한다. 패키지가 달라도 상속 관계의 호출은 허용한다.
(상속 관계로 속성과 기능을 숨길 때 사용, 상속 관계가 아닌 곳에서 해당 기능을 호출할 수 없다.)
- public: 모든 외부 호출을 허용한다.
(기능을 숨기지 않고 어디서든 호출할 수 있게 공개한다.)

접근 제어자 사용 - 필드, 메서드
주의: 지금부터는 패키지 위치가 매우 중요하다. 패키지 위치에 주의하자.

클래스 레벨의 접근 제어자 규칙
- 클래스 레벨의 접근 제어자는 public, default만 사용할 수 있다.
- public 클래스 반드시 파일명과 같아야 한다.

캡슐화
- 데이터와 해당 데이터를 처리하는 메서드를 하나로 묶어서 외부에서의 접근을 제한하는 것을 말한다.
- 외부에 꼭 필요한 기능만 노출하고 나머지는 모두 내부로 숨기는 것이다.
- 객체의 데이터는 객체가 제공하는 기능인 메서드를 통해서 접근해야 한다.
- 데이터는 모두 숨기고, 기능은 꼭 필요한 기능만 노출하는 것이 좋은 캡슐화이다.

01-07(화)
자바 메모리 구조
- 메서드 영역 > 스택 영역 > 힙 영역

메서드 영역
- 메서드 영역은 프로그램을 실행하는데 필요한 공통 데이터를 관리한다.
- 스택 영역: static 변수들을 보관한다.
스택 영역
- 자바 실행 시, 하나의 실행 스택이 생성된다. 각 스택 프레임은 지역 변수, 중간 연산 결과, 메서드 호출 정보 등을 포함한다.
- 스택 영역에 쌓이는 네모 박스가 하나의 스택 프레임이다.
- 메서드를 호출할 때 마다 하나의 스택 프레임이 쌓이고, 메서드가 종료되면 해당 스택 프레임이 제거된다.
힙 영역
- 객체와 배열이 생성되는 영역이다. 가비지 컬렉션이 이루어지는 주요 영역이며, 더 이상 참조되지 않는 객체는 GC에 의해 제거된다.

스택 큐 자료 구조

static(정적 변수)
- 주로 멤버 변수와 메서드에 사용한다.

용어 정리
- name, count는 둘 다 멤버 변수이다.
- static이 붙은 것과 아닌 것에 따라 다음과 같이 분류할 수 있다.

멤버 변수의 종류
- 인스턴스 변수(static이 붙지 않은)
- 클래스 변수(static이 붙은 변수, 정적 변수, 클래스 변수)

변수와 생명주기
- 지역변수(스택 영역)
- 인스턴스 변수(힙 영역)
- 클래스 변수(메서드 영역)